{"version":3,"sources":["assets/avatar.png","assets/made-with-bulma.png","components/Speaker.jsx","components/InfoCard.jsx","context/speaker.js","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Speaker","avatar","name","title","subject","description","className","src","alt","map","text","Tag","tag","key","InfoCard","children","speakerContext","Title","App","href","props","i","toString","style","width","madeWithBulma","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d9d4d530.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.fa6493a7.png\";","module.exports = __webpack_public_path__ + \"static/media/made-with-bulma.e0eab74d.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Speaker({\n  avatar, name, title, subject, description,\n}) {\n  return (\n    <div className=\"box\">\n\n      <div className=\"columns\">\n        <div className=\"column\">\n          <div className=\"columns is-vcentered\">\n            <div className=\"column is-narrow\">\n              <figure className=\"image is-128x128 m-auto\">\n                <img className=\"is-rounded\" src={avatar} alt=\"\" />\n              </figure>\n            </div>\n            <div className=\"column\">\n              <span className=\"is-size-4 has-text-weight-semibold\">{name}</span>\n              <span className=\"is-size-5\">{` / ${title}`}</span>\n              <div className=\"is-size-4 my-3 has-text-primary\">{subject}</div>\n            </div>\n          </div>\n\n        </div>\n\n      </div>\n      <div className=\"columns\">\n        <div className=\"column content is-desktop\">\n          <div>\n            {description.map(({ text, tag }) => {\n              const Tag = tag || 'p';\n              return <Tag key={text}>{text}</Tag>;\n            })}\n          </div>\n        </div>\n      </div>\n      {/* <article className=\"media\">\n        <div className=\"media-left\">\n\n        </div>\n        <div className=\"media-content\">\n          <div className=\"content\">\n            <span className=\"is-size-4 has-text-weight-semibold\">{name}</span>\n            <span className=\"is-size-5\">{` / ${title}`}</span>\n            <div className=\"is-size-4 my-3 has-text-primary\">{subject}</div>\n            <div>\n              {description.map(({ text, tag }) => {\n                const Tag = tag || 'p';\n                return <Tag key={text}>{text}</Tag>;\n              })}\n            </div>\n          </div>\n        </div>\n      </article> */}\n    </div>\n  );\n}\n\nSpeaker.propTypes = {\n  avatar: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  subject: PropTypes.string.isRequired,\n  description: PropTypes.arrayOf(PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    tag: PropTypes.string,\n  })).isRequired,\n};\n\nexport default Speaker;\n","import React from 'react';\n\nfunction InfoCard({ title, children }) {\n  return (\n    <div className=\"column is-4\">\n      <div className=\"card\">\n        <header className=\"card-header\">\n          <p className=\"card-header-title\">{title}</p>\n        </header>\n        <div className=\"card-content\">\n          <div className=\"content\">{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default InfoCard;\n","import avatar from '../assets/avatar.png';\n\nconst speakerContext = [\n  {\n    avatar,\n    name: 'Niko',\n    title: '網頁前端工程師',\n    subject: '蔡康永的情商課：為你自己活一次',\n    description: [\n      {\n        text: '「所有煩惱都來自於人際關係」－岸見一郎、古賀史健，《被討厭的勇氣》',\n        tag: 'blockquote',\n      },\n      {\n        text: '只要與他人互動，就會產生衝突，衝突一發生，情緒就像脫韁野馬，難以控制。',\n      },\n      {\n        text: '訓練自己的情商，讓那份情緒能真正被理解、表達、和解，最終解決問題。',\n      },\n    ],\n  },\n  {\n    avatar,\n    name: 'Eason',\n    title: '產品企劃',\n    subject: '我一定要跟你聊超過15分鐘',\n    description: [\n      {\n        text: '開場、提問、接話，從搭訕、陌生拜訪、到凝聚感情……幫助百萬人從此擺脫尷尬、緊張與冷場',\n        tag: 'blockquote',\n      },\n      { text: 'DEF' },\n    ],\n  },\n];\n\nexport default speakerContext;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport madeWithBulma from 'assets/made-with-bulma.png';\nimport Speaker from './components/Speaker';\nimport InfoCard from './components/InfoCard';\nimport speakerContext from './context/speaker';\nimport 'App.scss';\n\nfunction Title({ children }) {\n  return (\n    <h1 className=\"title has-text-centered\">\n      <span className=\"px-5 title-border\">{children}</span>\n    </h1>\n  );\n}\n\nTitle.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n  ]).isRequired,\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* Hero title */}\n      <section className=\"hero is-bold has-text-centered banner\">\n        <div className=\"hero-body\">\n          <div className=\"py-5 border-box\">\n            <div className=\"title is-size-1\">讀書分享會</div>\n            <div className=\"subtitle\">多一點時間，聆聽一本好書</div>\n          </div>\n        </div>\n      </section>\n      {/* Venue */}\n      <section className=\"section\">\n        <div className=\"container\">\n          <Title>基本資訊</Title>\n          <div className=\"columns\">\n            <InfoCard title=\"參與前\">\n              <ul>\n                <li>\n                  時間：2020/9 20:30-21:30 PM\n                  <span className=\"tag is-danger mx-1\">未定</span>\n                </li>\n                <li>類型：線上讀書會</li>\n                <li>\n                  工具：開場前十分鐘發送會議代碼，聽眾自行登入\n                  <a href=\"https://meet.google.com/\"> Google Meet </a>\n                  。\n                </li>\n              </ul>\n            </InfoCard>\n            <InfoCard title=\"參與中\">\n              <ul>\n                <li>不發出其他聲響干擾演講者，如播音樂。</li>\n                <li>中途離席不需告知。</li>\n                <li>\n                  對每位講者至少\n                  <span className=\"tag is-warning is-light is-medium px-0\">提出一個問題</span>\n                  或是自身\n                  <span className=\"tag is-warning is-light is-medium px-0\">經驗分享</span>\n                  。\n                </li>\n              </ul>\n            </InfoCard>\n            <InfoCard title=\"參與後\">\n              <ul>\n                <li>\n                  填寫\n                  <span className=\"tag is-warning is-light is-medium px-0\">回饋表單</span>\n                  ，感謝參與。\n                </li>\n                <li>表單連結將在讀書會結束後發送。</li>\n                <li>報名下次讀書分享會請洽 Niko。</li>\n              </ul>\n            </InfoCard>\n          </div>\n        </div>\n      </section>\n      {/* Speaker */}\n      <section className=\"hero is-medium is-primary is-bold\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <Title>講者</Title>\n            <div className=\"columns is-desktop\">\n              {speakerContext.map((props, i) => (\n                <div className=\"column\" key={`speaker${i.toString()}`}>\n                  <Speaker {...props} />\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n      {/* Agenda */}\n      <section className=\"section\">\n        <div className=\"container\">\n          <Title>議程</Title>\n          <table className=\"table\" style={{ width: '100%' }}>\n            <thead>\n              <tr>\n                <th>時間</th>\n                <th>活動</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>20:20</td>\n                <td>發送 Google Meet 會議代碼</td>\n              </tr>\n              <tr>\n                <td>20:30-20:50</td>\n                <td>第一位講者</td>\n              </tr>\n              <tr>\n                <td>20:50-21:00</td>\n                <td>討論時間</td>\n              </tr>\n              <tr>\n                <td>21:00-21:20</td>\n                <td>第二位講者</td>\n              </tr>\n              <tr>\n                <td>21:20-21:30</td>\n                <td>討論時間</td>\n              </tr>\n              <tr>\n                <td>21:30</td>\n                <td>填寫回饋問卷，結束</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </section>\n      {/* Footer */}\n      <footer className=\"footer\">\n        <div className=\"content has-text-centered\">\n          <p>\n            Hand crafted by\n            <span className=\"icon\">\n              <i className=\"fas fa-heart\" />\n            </span>\n          </p>\n          <p>\n            <a href=\"https://bulma.io\">\n              <img src={madeWithBulma} alt=\"Made with Bulma\" width=\"128\" height=\"24\" />\n            </a>\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}